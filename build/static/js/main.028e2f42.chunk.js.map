{"version":3,"sources":["zstate.js","store.js","components/ZUserInfoEditor.js","components/ZUserInfo.js","ZStateApp.js","App.js","serviceWorker.js","index.js"],"names":["ZStateStore","maxId","emitter","mitt","updatedEventName","id","isEqualToState","update","state","Array","isArray","isObject","k","hasOwnProperty","initState","_id","_state","this","get","Object","assign","emit","subscribe","callback","on","off","useZState","stateStore","useReducer","x","forceUpdate","useEffect","unsubscribe","bind","zuserInfoState","atom","key","default","name","pic","picInfo","download_url","nick","slogan","ImagePicker","React","lazy","render","ZUserInfoEditor","useState","open","setOpen","userInfo","updateUserInfo","useForm","register","control","onImagePickerChange","v","console","log","style","marginTop","type","defaultValue","ref","onChange","ev","target","value","onClick","fallback","onBlur","onClose","ZUserInfo","fontWeight","src","alt","width","height","border","padding","ZStateApp","className","backgroundImage","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.028e2f42.chunk.js","sourcesContent":["import {useEffect, useReducer} from \"react\";\nimport mitt from \"mitt\";\nimport {isObject} from \"lodash-es\";\n\n\n/**\n * State Store Class\n * This Class provides functions of store of accessing and pub/sub\n *\n * @param initState\n * @constructor\n */\nconst ZStateStore = (function () {\n  // initialize state id counter\n  //   used to generate new state id\n  let maxId = 1;\n\n  // pub/sub manager\n  const emitter = mitt();\n\n  const updatedEventName = function (id) {\n    return `s_${id}_updated`;\n  };\n\n  // check if the update values is equal to previous corresponding state value\n  // Following situations will be considered as different\n  //   1. update including array\n  //   1. update is a plain object and has at least one element in deep different to state value\n  //   1. update is simple type and different to state value\n  const isEqualToState = (function () {\n\n    // return function (update, state, options = {level: 1}) {\n    return function (update, state) {\n      // const level = options.level;\n      // if (level < 1) return true;\n\n      if (Array.isArray(update)) {\n        // console.log(update, state)\n\n        return false;\n      }\n      else if (!isObject(update)) {\n        // console.log(update, state, update == state, typeof update, typeof state);\n\n        return update === state;\n      } else {\n        if (!isObject(state)) return false;\n\n        // const _level = level > 1 ? level - 1 : 0;\n        for(let k in update) {\n          if (update.hasOwnProperty(k)) {\n            if (!state.hasOwnProperty(k)) return false;\n            // if (state[k]) return false;\n            if (!isEqualToState(update[k], state[k])) return false;\n          }\n        }\n        // console.log(update, state)\n\n        return true;\n      }\n\n    }\n  })();\n\n\n  function ZStateStore(initState) {\n    // state id\n    const _id = maxId++;\n\n    // state's plain javascript object\n    let _state = initState;\n\n\n    this.get = function () {\n      return _state;\n    };\n\n    this.update = function (update) {\n      // if update is equal to state value, skip update\n      //   @see isEqualToState() for situations considered difference\n      if (isEqualToState(update, _state)) {\n        // console.log('is equal');\n        return;\n      }\n\n      // update state\n      Object.assign(_state, update);\n\n      // emit notification\n      emitter.emit(updatedEventName(_id)); //, [_state, update])\n    };\n\n    this.subscribe = function (callback) {\n      // listen state update event\n      emitter.on(updatedEventName(_id), callback); //, [_state, update])\n\n      return function () {\n        // un-listen state update event\n        emitter.off(updatedEventName(_id), callback);\n      }\n    };\n  }\n\n  return ZStateStore;\n}());\n\n\n/**\n * Generate a new state store\n * Use this function create stores for your app at first while using zstate library\n *\n * @param {any} initState inital state\n * @returns {*}\n */\nexport function zstate(initState) {\n  return new ZStateStore(initState);\n}\n\n/**\n * React hook for accessing state in your react component\n *\n * Usage:\n *\n * // in store.js\n * export const userState = zstate({name: 'Jack', nick: 'Hero', hobby:['reading']})\n *\n * // in your component\n * import {userState} from \"./store\"\n * ...\n * const [user, updateUser] = useZState(store)\n * const name = user.name\n * updateUser({nick: 'Flower', hobby:['reading']})\n *\n *\n * @param {ZStateStore} stateStore\n * @returns {Array} [state, setter]\n */\nexport function useZState(stateStore) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  // const self = this;\n  useEffect(() => {\n    const unsubscribe = stateStore.subscribe(() => {\n      forceUpdate() // force component update\n    });\n    return () => {\n      unsubscribe();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return [\n    // state's plain object,\n    // NOTICE: DON'T mutate this object, use it readonly\n    stateStore.get(),\n\n    // state setter\n    //   NOTICE: state setter doesn't notify the component before the first render\n    stateStore.update.bind(stateStore)\n  ];\n}\n","import {atom} from \"recoil\";\nimport {zstate} from \"./zstate\";\n\nexport const userInfoState = atom({\n  key: 'userInfoState',\n  default: {\n    name: 'Zhang San',\n    pic: 'https://picsum.photos/id/10/1200',\n    picInfo: {\n      id: 10,\n      download_url: 'https://picsum.photos/id/10/2500/1667'\n    },\n    nick: 'Hero',\n    slogan: ''\n  }\n});\n\nexport const zuserInfoState = zstate({\n  name: 'Zhang San',\n  pic: 'https://picsum.photos/id/10/1200',\n  picInfo: {\n    id: 10,\n    download_url: 'https://picsum.photos/id/10/2500/1667'\n  },\n  nick: 'Hero',\n  slogan: ''\n});\n","import React, {Suspense, useState} from 'react';\n// import {ImagePicker} from \"./ImagePicker\";\n\nimport {Controller, useForm} from \"react-hook-form\";\nimport {useZState} from \"../zstate\";\nimport {zuserInfoState} from \"../store\";\n\nconst ImagePicker = React.lazy(() => import('./ImagePicker'));\n\nlet render = 1;\nexport default function ZUserInfoEditor() {\n  const [open, setOpen] = useState(false);\n  const [userInfo, updateUserInfo] = useZState(zuserInfoState);\n  const {register, control} = useForm();\n\n  console.log(render++);\n\n  function onNickChange(ev) {\n    updateUserInfo({...userInfo, [ev.target.name]: ev.target.value});\n  }\n\n  function onImagePickerChange(v) {\n    updateUserInfo({...userInfo, pic: `https://picsum.photos/id/${v.id}/1200`, picInfo: v});\n    setOpen(false);\n  }\n\n  return <div>\n    <h1 style={{marginTop: 0}}>Edit User Info</h1>\n    <p>nick <input name={'nick'} type={'text'} defaultValue={userInfo.nick} ref={register} onChange={onNickChange}/></p>\n    <div>\n      <div>{userInfo.pic}</div>\n      <button onClick={() => {\n        setOpen(true);\n      }}>Choice User Picture\n      </button>\n\n      {/*<ImagePicker*/}\n      {/*    onChange={onImagePickerChange}*/}\n      {/*    name={\"pic\"} open={open}*/}\n      {/*    onClose={() => setOpen(false)}/>*/}\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Controller\n            control={control}\n            name={'pic'}\n            render={({onChange, onBlur, value}) => {\n              return <ImagePicker\n                  onChange={(...args) => {\n                    onChange(...args);\n                    onImagePickerChange(...args)\n                  }}\n                  name={\"pic\"} open={open} onClose={() => setOpen(false)}/>\n            }}\n        />\n      </Suspense>\n\n    </div>\n  </div>;\n}\n","import React from 'react';\nimport {useZState} from \"../zstate\";\nimport {zuserInfoState} from \"../store\";\n\n// let render = 1;\nexport default function ZUserInfo() {\n  const [userInfo] = useZState(zuserInfoState);\n\n  return <div>\n    <div><h1 style={{marginTop: 0}}>User Info</h1></div>\n    <p>{userInfo.name}</p>\n    <p style={{fontWeight: 700}}>{userInfo.nick}</p>\n    <p><img src={userInfo.pic} alt={''}\n            style={{\n              width: \"200px\",\n              height: \"200px\",\n              border: '6px dotted #333',\n              padding: '15px'\n            }}/></p>\n  </div>;\n}\n","import React from \"react\";\nimport ZUserInfoEditor from \"./components/ZUserInfoEditor\";\nimport ZUserInfo from \"./components/ZUserInfo\";\nimport {zuserInfoState} from \"./store\";\nimport {useZState} from \"./zstate\";\n\n// const userState = zstate({name: 'Hero'});\n// let render = 1;\n//\n// function UserInfo() {\n//   const [user] = useZState(userState);\n//\n//   return <div>{user.name}</div>\n// }\n//\n// function UserInfoEditor() {\n//   const [user, setUser] = useZState(userState);\n//\n//   return <div>\n//     <input name={'name'} type={'text'} value={user.name}\n//            onChange={(ev) => setUser({name: ev.target.value})}/>\n//   </div>;\n// }\n\nfunction ZStateApp() {\n  const [userInfo] = useZState(zuserInfoState);\n  // console.log(userInfo);\n\n  return <div className='App' style={{backgroundImage: 'url(\\'' + userInfo.picInfo.download_url + '\\')'}}>\n    <ZUserInfo/>\n    <ZUserInfoEditor/>\n  </div>\n}\n\nexport default ZStateApp\n","import React from 'react'\n// import logo from './logo.svg';\nimport './App.css'\nimport ZStateApp from \"./ZStateApp\";\n\nfunction App() {\n\n  return <ZStateApp />\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// {/*<React.StrictMode>*/}\n// {/*  <App />*/}\n// {/*</React.StrictMode>,*/}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}